def getDiffs(yearStr, year, verbose=True):
    index = 10
    solves = [0]*12
    losts = [0]*12
    partials = [0]*12
    n = 0
    score = 10
    words = []
    for line in yearStr.split('\n'):
        words += line.split()
    for i in range(12):
        L = words[(len(words)//12)*i:(len(words)//12)*(i+1)]
        if score >= 5:
            for i in range(1,13):
                solves[i-1] += int(L[i])
                losts[i-1] += (10-score)*int(L[i])
        elif score > 0:
            for i in range(1,13):
                partials[i-1] += score*int(L[i])
        score -= 1
        n += int(L[1])
    if verbose:
        for i in range(12):
            print(chr(ord('A')+i//6)+str((i%6)+1)+'\t'+str(round(100.0*solves[i]/n,2))+\
                  '% solved\t'+str(round((0 if solves[i] == 0 else losts[i]/solves[i]),2))+' avg. missed\t'+\
                  str(round((0 if solves[i] == n else partials[i]/(n-solves[i])),2))+' avg. partial\n')
        
    L = []
    for i in range(12):
        L.append([solves[i]*100.0/n, (0 if solves[i] == 0 else losts[i]/solves[i]), (0 if solves[i] == n else partials[i]/(n-solves[i])),\
                  str(year)+' '+chr(ord('A')+i//6)+str((i%6)+1)])
    return L
            
            
allPutnam = []#[[77.66990291262135, 0.75, 0.45652173913043476, '1996 A1'], [21.359223300970875, 1.4772727272727273, 0.9444444444444444, '1996 A2'], [42.23300970873787, 0.3448275862068966, 0.0, '1996 A3'], [8.25242718446602, 1.2352941176470589, 0.1746031746031746, '1996 A4'], [4.854368932038835, 0.8, 0.0663265306122449, '1996 A5'], [9.223300970873787, 1.368421052631579, 0.2620320855614973, '1996 A6'], [98.05825242718447, 0.5247524752475248, 1.75, '1996 B1'], [50.48543689320388, 0.2403846153846154, 0.3627450980392157, '1996 B2'], [22.815533980582526, 0.7446808510638298, 0.4025157232704403, '1996 B3'], [24.75728155339806, 0.35294117647058826, 0.24516129032258063, '1996 B4'], [21.844660194174757, 0.4, 0.049689440993788817, '1996 B5'], [4.854368932038835, 1.9, 0.02040816326530612, '1996 B6'], [72.6829268292683, 0.12751677852348994, 0.07142857142857142, '1997 A1'], [62.4390243902439, 1.015625, 0.5584415584415584, '1997 A2'], [18.048780487804876, 0.972972972972973, 0.25, '1997 A3'], [59.51219512195122, 0.1885245901639344, 0.1686746987951807, '1997 A4'], [22.926829268292682, 0.851063829787234, 0.37341772151898733, '1997 A5'], [0.975609756097561, 1.5, 0.11822660098522167, '1997 A6'], [90.2439024390244, 0.11891891891891893, 0.5, '1997 B1'], [14.634146341463415, 0.1, 0.02857142857142857, '1997 B2'], [5.853658536585366, 1.5, 0.3316062176165803, '1997 B3'], [17.5609756097561, 0.5555555555555556, 0.08284023668639054, '1997 B4'], [7.804878048780488, 0.625, 0.30687830687830686, '1997 B5'], [6.829268292682927, 1.0, 0.031413612565445025, '1997 B6'], [91.95979899497488, 0.16939890710382513, 0.0, '1998 A1'], [82.41206030150754, 0.5304878048780488, 0.7428571428571429, '1998 A2'], [59.2964824120603, 0.3220338983050847, 0.12345679012345678, '1998 A3'], [59.2964824120603, 1.1101694915254237, 1.2962962962962963, '1998 A4'], [62.311557788944725, 0.43548387096774194, 0.16, '1998 A5'], [8.040201005025125, 0.4375, 0.08196721311475409, '1998 A6'], [86.4321608040201, 0.5232558139534884, 0.3333333333333333, '1998 B1'], [50.753768844221106, 0.27722772277227725, 0.17346938775510204, '1998 B2'], [25.628140703517587, 0.19607843137254902, 0.10810810810810811, '1998 B3'], [36.68341708542714, 0.726027397260274, 0.5555555555555556, '1998 B4'], [43.21608040201005, 0.6976744186046512, 0.1415929203539823, '1998 B5'], [20.603015075376884, 0.5853658536585366, 0.08227848101265822, '1998 B6'], [85.36585365853658, 0.4857142857142857, 0.8, '1999 A1'], [51.21951219512195, 0.6857142857142857, 0.08, '1999 A2'], [56.09756097560975, 0.12173913043478261, 0.2222222222222222, '1999 A3'], [30.73170731707317, 0.5238095238095238, 0.056338028169014086, '1999 A4'], [4.878048780487805, 0.9, 0.08205128205128205, '1999 A5'], [24.878048780487806, 0.5686274509803921, 0.045454545454545456, '1999 A6'], [78.04878048780488, 0.31875, 0.26666666666666666, '1999 B1'], [36.09756097560975, 0.6081081081081081, 0.13740458015267176, '1999 B2'], [23.414634146341463, 0.125, 0.25477707006369427, '1999 B3'], [0.0, 0, 0.00975609756097561, '1999 B4'], [0.0, 0, 0.00975609756097561, '1999 B5'], [6.341463414634147, 1.1538461538461537, 0.03125, '1999 B6'], [38.46153846153846, 0.25333333333333335, 0.6833333333333333, '2000 A1'], [77.43589743589743, 0.006622516556291391, 0.045454545454545456, '2000 A2'], [53.333333333333336, 0.5769230769230769, 0.6043956043956044, '2000 A3'], [7.17948717948718, 0.42857142857142855, 0.07734806629834254, '2000 A4'], [23.076923076923077, 0.4222222222222222, 0.02666666666666667, '2000 A5'], [2.5641025641025643, 1.2, 0.13157894736842105, '2000 A6'], [73.84615384615384, 0.1527777777777778, 0.5882352941176471, '2000 B1'], [63.07692307692308, 0.08943089430894309, 0.1388888888888889, '2000 B2'], [6.153846153846154, 1.0, 0.5027322404371585, '2000 B3'], [10.256410256410257, 0.35, 0.06857142857142857, '2000 B4'], [30.256410256410255, 0.7457627118644068, 0.19852941176470587, '2000 B5'], [4.615384615384615, 0.1111111111111111, 0.0, '2000 B6']]

def addYear(year, yearStr):
    global allPutnam
    allPutnam += getDiffs(yearStr, year, False)
def outputPutnamData(fileName):
    global allPutnam
    f = open(fileName, 'w')
    allPutnam = sorted(allPutnam, reverse=1)
    f.write('Problem  %Solved  Lost Partial\n')
    f.write('=======   =====   ====   ====\n')
    for line in allPutnam:
        f.write('{0}   {1:5.2f}   {2:4.2f}   {3:4.2f}\n'.format(line[3],line[0],line[1],line[2]))
    f.close()
def processRankData(dataStr, year):
    tuples = []
    for line in dataStr.split('\n'):
        x = line.split()
        for i in range(0,len(x)-1,2):
            if x[i][0] in '0987654321':
                tuples.append((float(x[i]),float(x[i+1])))
    return sorted(tuples,reverse=1)
def genRankFreqs(rankTuples):
    hist = []
    nPrevs = 0
    scoreList = []
    for score, rank in rankTuples:
        if score in scoreList:
            continue
        scoreList.append(score)
        hist.append((score,(rank-nPrevs)*2-1))
        nPrevs += hist[-1][1]
    return hist
    pass            
def loadData(filename):
    f = open(filename,'r')
    data = []
    for line in f.readlines()[2:]:
        line = line.split()
        data.append((int(line[0]), line[1], float(line[2]), float(line[3]), float(line[4])))
    f.close()
    return sorted(data)

loadData('putnamData.txt')
